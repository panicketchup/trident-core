#!/bin/bash
# Script to automate the installation of system updates with appropriate safeguards from ZFS boot environments

#temporary log files and state flags
_checklog="/tmp/trident-update-check.log"
_uplog="/tmp/trident-update.log"

showUsage(){
  echo "Usage:
  trident-update <-update | -check>
  -update: Perform updates after making a snapshot of the current system boot environment
  -check: Check for available updates
"
}

mkSnapshot(){
  tag=${1:-pre-update}
  BE=$(mount | grep " on / type zfs" | cut -d ' ' -f 1)
  if [ -z "${BE}" ] ; then return ; fi
  local _dt=$(date "+%F-%H-%M")
  echo "Creating snapshot of current boot environment"
  zfs snapshot "${BE}@${tag}-${_dt}"
}

updateXbps(){
  curver=$(xbps-query xbps | grep pkgver | cut -d : -f 2)
  newver=$(xbps-query -R xbps | grep pkgver | cut -d : -f 2)
  if [ "${curver}" != "${newver}" ] ; then
    mkSnapshot "pre-xbps"
    xbps-install -y xbps
  fi
}

checkUpdates(){
  # Update repository catalogs
  xbps-install -S
  #Check if xbps itself needs to be updated first
  updateXbps
  # Scan for updates
  local cnum=0
  xbps-install -un
  # Format the info

}

rebuildInitramfs(){
  #This is a safeguard for the ZFS-on-linux.
  # Seen a couple cases where the initramfs was not rebuilt properly or at the right time
  # preventing bootup with the new kernel.
  # Just take a few seconds here to rebuild that image every time
  
  # Get the currently-installed linux package name
  linuxver=`xbps-query -p pkgver linux | cut -d - -f 2 | cut -d . -f 1-2 | cut -d _ -f 1`
  echo "Got Linux Version: ${linuxver}"
  # Reconfigure that package
  xbps-reconfigure -f "linux${linuxver}"
}

doUpdates(){
  # Update repository catalogs
  xbps-install -S
  #Check if xbps itself needs to be updated first
  updateXbps
  # Create ZFS snapshot of the current system pre-update
  mkSnapshot
  # Start doing updates
  xbps-install -uy
  rebuildInitramfs
}

# Check for permissions first
if [ $(id -u) -ne 0 ] ; then
  echo "ERROR: This script needs to run as root"
  exit 1
fi

# Evaluate arguments
case "${1}" in
 -update)
	doUpdates
	;;
  -check)
	checkUpdates
	;;
  *)
	showUsage
	;;
esac
